// Generated by CoffeeScript 1.4.0
(function() {
  var chokidar, express, helper, path, uid,
    __hasProp = {}.hasOwnProperty;

  path = require('path');

  chokidar = require('chokidar');

  express = require('express');

  helper = require("./helper");

  uid = (function() {
    var _id;
    _id = 1;
    return function() {
      return _id++;
    };
  })();

  module.exports = function(app, options) {
    var max, resCache, watcher, _ref;
    app.use(express["static"](path.join(__dirname, "../vendor")));
    if ((_ref = options.ignored) == null) {
      options.ignored = /(\/|^)\..*|node_modules/;
    }
    if (!options.dir) {
      throw Error("dir option is need to watch");
    }
    resCache = [];
    max = 100;
    watcher = chokidar.watch(options.dir, {
      ignored: options.ignored,
      persistent: true,
      interval: options.interval
    });
    helper.log("watcher on!!");
    watcher.on('change', function(path, stats) {
      return resCache.forEach(function(res) {
        return res.emit("changeFile", {
          path: path
        });
      });
    });
    app.use("/puer_server_send", function(req, res, next) {
      req.socket.setTimeout(Infinity);
      if (resCache.length >= max) {
        resCache.shift();
        helper.log("resCache.length is more than " + max + ", shift the first one", "warn");
      }
      resCache.push(res);
      res.sse = function(infos) {
        var key, value;
        infos.event || (infos.event = "update");
        res.write("\n");
        res.write("id: " + (uid()) + "\n");
        for (key in infos) {
          if (!__hasProp.call(infos, key)) continue;
          value = infos[key];
          res.write("" + key + ": " + value + "\n");
        }
        return res.write("\n");
      };
      res.on("changeFile", function(data) {
        var infos, isCss, stats;
        path = data.path;
        stats = data.stats;
        isCss = ~path.indexOf(".css");
        infos = {
          data: "" + path
        };
        if (isCss) {
          infos.event = "css";
        }
        return res.sse(infos);
      });
      res.writeHead(200, {
        'Content-Type': 'text/event-stream',
        'Cache-Control': 'no-cache',
        'Connection': 'keep-alive'
      });
      res.write('\n');
      return req.on("close", function() {
        var index;
        index = resCache.indexOf(res);
        if (~index) {
          return resCache.splice(index, 1);
        }
      });
    });
    return function(req, res, next) {
      var end, write;
      write = res.write;
      end = res.end;
      res.write = function(chunk, encoding) {
        var header, length;
        header = res.getHeader("content-type");
        length = res.getHeader("content-length");
        if ((/^text\/html/.test(header)) || !header) {
          if (Buffer.isBuffer(chunk)) {
            chunk = chunk.toString("utf8");
          }
          if (!~chunk.indexOf("</head>")) {
            return write.call(res, chunk, "utf8");
          }
          chunk = chunk.replace("</head>", "<script src='/js/reload.js'></script></head>");
          if (length) {
            length = parseInt(length);
            length += Buffer.byteLength("<script src='/js/reload.js'>");
            res.setHeader("content-length", length);
          }
          return write.call(res, chunk, "utf8");
        } else {
          return write.call(res, chunk, encoding);
        }
      };
      res.end = function(chunk, encoding) {
        if (chunk != null) {
          this.write(chunk, encoding);
        }
        return end.call(res);
      };
      return next();
    };
  };

}).call(this);
