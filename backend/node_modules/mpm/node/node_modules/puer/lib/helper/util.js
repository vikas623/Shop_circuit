// Generated by CoffeeScript 1.4.0
(function() {
  var colorify, distinct, exec, extendOne, fs, pad, sysPath, util;

  fs = require("fs");

  sysPath = require("path");

  exec = (require("child_process")).exec;

  colorify = require("./colorify");

  pad = function(num) {
    if (num < 10) {
      return "0" + num;
    } else {
      return "" + num;
    }
  };

  extendOne = function(obj, index, item) {
    if (!(obj[index] != null)) {
      return obj[index] = item;
    }
  };

  distinct = function(array) {
    var arr;
    arr = array.slice(0).sort();
    arr.sort(function(a, b) {
      var n;
      if (a === b) {
        n = arr.indexOf(a);
        return array.splice(n, 1);
      }
    });
    return array;
  };

  module.exports = util = {
    formatDate: function(d) {
      d || (d = +(new Date));
      if (this.typeOf(d) !== "date") {
        d = new Date(parseInt(d));
      }
      return "" + (d.getFullYear()) + "-" + (pad(d.getMonth() + 1)) + "-" + (pad(d.getDate())) + "  " + (pad(d.getHours())) + ":" + (pad(d.getMinutes())) + ":" + (pad(d.getSeconds()));
    },
    send: function(path, res, type) {
      var stream;
      if (type == null) {
        type = "text/html";
      }
      res.setHeader("Content-Type", type);
      stream = fs.createReadStream(path, {
        encoding: 'utf8'
      });
      return stream.pipe(res);
    },
    typeOf: function(obj) {
      if (obj === null || obj === void 0) {
        return String(obj);
      } else {
        return Object.prototype.toString.call(obj).slice(8, -1).toLowerCase();
      }
    },
    extend: function(obj1, obj2, callback) {
      var i, item, _results;
      if (callback == null) {
        callback = extendOne;
      }
      _results = [];
      for (i in obj2) {
        item = obj2[i];
        _results.push(callback(obj1, i, item));
      }
      return _results;
    },
    merge: function(obj1, obj2) {
      util.extend(obj1, obj2, function(obj1, i, item) {
        switch (util.typeOf(item)) {
          case "array":
            if (util.typeOf(obj1[i]) === "array") {
              return obj1[i] = distinct(obj1[i].concat(item));
            } else {
              return obj1[i] = item;
            }
            break;
          case "object":
            if (util.typeOf(obj1[i]) === "object") {
              return util.extend(obj1[i], item);
            } else {
              return obj1[i] = item;
            }
            break;
          default:
            if (!(obj1[i] != null)) {
              return obj1[i] = item;
            }
        }
      });
      return obj1;
    },
    requireFolder: function(dir) {
      var $exports, files;
      files = fs.readdirSync(dir);
      $exports = {};
      files.forEach(function(file, index) {
        var base;
        if (sysPath.extname(file) !== ".js") {
          return;
        }
        base = sysPath.basename(file, ".js");
        return $exports[base] = require(sysPath.join(dir, file));
      });
      return $exports;
    },
    openBrowser: function(target, callback) {
      var map, opener;
      map = {
        'darwin': 'open',
        'win32': 'start '
      };
      opener = map[process.platform] || 'xdg-open';
      return exec("" + opener + " " + target, callback);
    },
    log: function(info, level) {
      var color, level2color;
      level || (level = "log");
      level2color = {
        "error": "red",
        "warn": "yellow",
        "log": "green"
      };
      color = level2color[level] || "green";
      return console.log("" + (colorify(level, color)) + ":\t " + info + " \t " + (colorify(this.formatDate(), 'cyan')));
    }
  };

}).call(this);
